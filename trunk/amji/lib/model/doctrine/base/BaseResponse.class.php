<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Response', 'doctrine');

/**
 * BaseResponse
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idresponse
 * @property string $content
 * @property integer $user
 * @property integer $request
 * @property integer $response
 * @property Request $Request
 * @property Doctrine_Collection $Response
 * @property User $User
 * 
 * @method integer             getIdresponse() Returns the current record's "idresponse" value
 * @method string              getContent()    Returns the current record's "content" value
 * @method integer             getUser()       Returns the current record's "user" value
 * @method integer             getRequest()    Returns the current record's "request" value
 * @method integer             getResponse()   Returns the current record's "response" value
 * @method Request             getRequest()    Returns the current record's "Request" value
 * @method Doctrine_Collection getResponse()   Returns the current record's "Response" collection
 * @method User                getUser()       Returns the current record's "User" value
 * @method Response            setIdresponse() Sets the current record's "idresponse" value
 * @method Response            setContent()    Sets the current record's "content" value
 * @method Response            setUser()       Sets the current record's "user" value
 * @method Response            setRequest()    Sets the current record's "request" value
 * @method Response            setResponse()   Sets the current record's "response" value
 * @method Response            setRequest()    Sets the current record's "Request" value
 * @method Response            setResponse()   Sets the current record's "Response" collection
 * @method Response            setUser()       Sets the current record's "User" value
 * 
 * @package    amji
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseResponse extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('response');
        $this->hasColumn('idresponse', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('content', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('user', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('request', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '4',
             ));
        $this->hasColumn('response', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Request', array(
             'local' => 'request',
             'foreign' => 'idrequest'));

        $this->hasMany('Response', array(
             'local' => 'idresponse',
             'foreign' => 'response'));

        $this->hasOne('User', array(
             'local' => 'user',
             'foreign' => 'iduser'));
    }
}