<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	backgroundAlpha="0"
    showTitleBar="false"
    showStatusBar="false"
    showGripper="false"
    borderStyle="none"
    applicationComplete="init()" xmlns:components="commun.components.*"
    close="closeHandler()"
    width="100%" height="100%" xmlns:messaging="weborb.messaging.*">
	
	<mx:Metadata>
        [ResourceBundle("i18n")]
    </mx:Metadata>
    
    <mx:Script>
		<![CDATA[
			import org.igniterealtime.xiff.events.DisconnectionEvent;
			import org.igniterealtime.xiff.events.LoginEvent;
			import org.igniterealtime.xiff.events.ConnectionSuccessEvent;
			import org.igniterealtime.xiff.events.XIFFErrorEvent;
			import org.igniterealtime.xiff.data.register.RegisterExtension;
			import org.igniterealtime.xiff.data.IQ;
			import org.igniterealtime.xiff.core.EscapedJID;
			import commun.Constantes;
			import org.igniterealtime.xiff.core.XMPPConnection;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.events.MessageEvent;
			import commun.Commun;
			import view.contacts.SearchContact;
			import commun.components.AmjiAlert;
			import view.MainWindow;
			import commun.components.AmjiLoading;
			import mx.managers.PopUpManager;
			import mx.controls.PopUpButton;
			import mx.effects.Fade;
			import commun.components.PopupFugace;
			import commun.components.AmjiLoader;
			import mx.preloaders.Preloader;
			import com.bedreamy.components.voile.Voile;
			import mx.managers.CursorManager;
			import model.vo.CreateUserVO;
			import view.InscriptionWindow;
			import commun.Actions;
			import com.bedreamy.facade.MainFacade;
			import mx.controls.Alert;
			import view.LoginWindow;
			private var facade:ApplicationFacade = ApplicationFacade.getInstance();
			private var bedreamy:MainFacade = MainFacade.getInstance();
			public var window:LoginWindow;
			public var mainWindow : MainWindow;
			public var alertWindow : AmjiAlert;
			[Bindable]
    		private var locales:Array = [ "en_US" , "fr_FR" ];
    		public var poopupFugace : PopupFugace;
    		public var searchContactWin : SearchContact;    		
			private function init():void{
				window = new LoginWindow();
				inscWindow = new InscriptionWindow();
				facade.startup(this);
				this.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE,handleChangeState);						
				openLoginWindow();
				bedreamy.mainapplication = this;
				poopupFugace = new PopupFugace();
				poopupFugace.visible=false;	
				poopupFugace.type = NativeWindowType.LIGHTWEIGHT;
				poopupFugace.systemChrome = "none";
				poopupFugace.transparent = true;	
				poopupFugace.open();
				if(Commun.getStoredItem(Commun.login)!=null){
					window.userVO.login = Commun.getStoredItem(Commun.login);
					window.txtLogin.content = Commun.getStoredItem(Commun.login);
				}				
				if(Commun.getStoredItem(Commun.pass)!=null){
					window.userVO.pass = Commun.getStoredItem(Commun.pass);
					window.txtPass.content = Commun.getStoredItem(Commun.pass);
				}													 			
			}	
			
			private function handleChangeState(event:NativeWindowDisplayStateEvent):void{
				if(event.afterDisplayState == NativeWindowDisplayState.MINIMIZED){ 
					window.orderToBack();						
				}else if(event.afterDisplayState == NativeWindowDisplayState.NORMAL){
					window.orderToFront();					
				} 
			}
			
			private function openLoginWindow():void{
								
				window.type = NativeWindowType.LIGHTWEIGHT;
				window.systemChrome = "none";
				window.transparent = true;	
				window.open();
				window.addEventListener(Actions.SHOWUSERUI,createUser);
				window.addEventListener(Actions.CLOSEAPPLI,closeAppli);	
				window.addEventListener(Actions.LOGIN,login);						
			}
			public var voile : AmjiLoader;
			public var loader : AmjiLoading = new AmjiLoading;
			public function login(event : Event):void{				      			
      			ApplicationFacade.getConnexion().addEventListener( LoginEvent.LOGIN, handleLogin );
      			ApplicationFacade.getConnexion().addEventListener( XIFFErrorEvent.XIFF_ERROR, handleError );
      			ApplicationFacade.getConnexion().addEventListener( DisconnectionEvent.DISCONNECT, handleDisconnect );
      			ApplicationFacade.getConnexion().server = Constantes.XMPPSERVEUR;
      			ApplicationFacade.getConnexion().useAnonymousLogin = false;      			
      			ApplicationFacade.getConnexion().username = Constantes.XMPPUSERPREFIX+window.userVO.login.substr(0,window.userVO.login.lastIndexOf("@"));
          		ApplicationFacade.getConnexion().password = window.userVO.pass;
				ApplicationFacade.getConnexion().connect();				
				PopUpManager.addPopUp(loader,window,true);
				PopUpManager.centerPopUp(loader);
				// register login && password && statut
				
				if(window.window.checkSavePass!=null && window.window.checkSavePass.selected){
					Commun.storeEncrypt(Commun.pass,window.txtPass.content);
				}
				
				if(window.window.checkSaveLogin!=null && window.window.checkSaveLogin.selected){
					Commun.storeEncrypt(Commun.login,window.txtLogin.content);
					
				}else if(window.window.checkSaveLogin!=null && !window.window.checkSaveLogin.selected){
					Commun.clearStoredItem(Commun.login);
					Commun.clearStoredItem(Commun.pass);
				}							
				
			}
			
			private function handleLogin( event:LoginEvent ):void
		    {
		      facade.sendNotification(Actions.GENERICUSER,window.userVO,Actions.LOGIN);	      
		    }
		    private function handleDisconnect( event:DisconnectionEvent ):void
		    {
		      
		    }
			
			
			
			public function hideLoader():void{
				PopUpManager.removePopUp(loader);				
			}
			
			public function closeInscWin(event : Event):void{
				inscWindow.nativeWindow.visible = false;				
				window.nativeWindow.visible = true;
			}
			public var inscWindow : InscriptionWindow ;
			
			public function createUser(event : Event):void{
				inscWindow = new InscriptionWindow;
				inscWindow.type = NativeWindowType.LIGHTWEIGHT;
				inscWindow.systemChrome = "none";
				inscWindow.transparent = true;	
				inscWindow.open();							
				inscWindow.addEventListener(Actions.CLOSEINSCWIN,closeInscWin);
				inscWindow.addEventListener(Actions.CREATAUSER,createUsertest);
				inscWindow.createUserVO = new CreateUserVO();				
				window.nativeWindow.visible = false;
				window.closePopupExt();												
			}
			
			public function createUsertest(e:Event):void{				
	      		ApplicationFacade.getConnexion().port = Constantes.XMPPPORT;
	      		ApplicationFacade.getConnexion().resource = "amjiim";      		
	      		ApplicationFacade.getConnexion().server = Constantes.XMPPSERVEUR;
	      		ApplicationFacade.getConnexion().addEventListener( XIFFErrorEvent.XIFF_ERROR, handleError );
	      		ApplicationFacade.getConnexion().addEventListener( ConnectionSuccessEvent.CONNECT_SUCCESS, handleConnection );
	      		ApplicationFacade.getConnexion().connect();
	        	
				PopUpManager.addPopUp(loader,inscWindow,true);
				PopUpManager.centerPopUp(loader);				
			}
			
			private function handleConnection( event:ConnectionSuccessEvent ):void
		    {
				var iq:IQ = new IQ(new EscapedJID(ApplicationFacade.getConnexion().server), IQ.TYPE_SET);
		  		iq.callbackName = "handleRegistration";
		    	iq.callbackScope = this;
				
				var reg:RegisterExtension = new RegisterExtension();
				reg.username = Constantes.XMPPUSERPREFIX+inscWindow.createUserVO.email.substr(0,inscWindow.createUserVO.email.lastIndexOf("@"));
				reg.password = inscWindow.createUserVO.password;				
				iq.addExtension(reg);				
				ApplicationFacade.getConnexion().send(iq);			
		    }
			
			public function handleRegistration(iq:IQ):void {
				facade.sendNotification(Actions.GENERICUSER,inscWindow.createUserVO,Actions.CREATAUSER);
			}
			
			private function handleError( event:XIFFErrorEvent ):void
		    {
		      Alert.show( event.errorCondition, "Error" );
		    }
			
			public function closeAppli(e:Event):void{
				this.close();
				poopupFugace.close();
				inscWindow.close();
				mainWindow.close();
				if(searchContactWin != null)
					searchContactWin.close();
			}
			
			public function closeHandler():void{
				if(window!=null)
					window.close();
				if(poopupFugace != null)
					poopupFugace.close();	
				if(inscWindow != null)
					inscWindow.close();
				if(mainWindow != null)
					mainWindow.close();
				if(searchContactWin != null)
					searchContactWin.close();
				this.close();
			}
			
			public function geti18nText(key : String):String{
				return resourceManager.getString('i18n', key);
			}
		]]>
	</mx:Script>
	<mx:Style source="AmjiTheme.css"/>
	<!--<mx:VBox width="100%" height="100%" backgroundColor="#FFFFFF">
	<mx:Spacer height="1.2" />
		<mx:HBox width="100%" horizontalGap="0" horizontalAlign="right">			
			<components:WindowMin label="" width="43" height="27.5" useHandCursor="true" buttonMode="true"/>
			<components:WindowMax label="" width="43" height="27.5" useHandCursor="true" buttonMode="true"/>
			<components:WindowClose label="" width="43" height="27.5" useHandCursor="true" buttonMode="true" click="this.close();"/>
			<mx:Spacer width="18" /> 	
		</mx:HBox>
			
	</mx:VBox>-->	
</mx:WindowedApplication>

