<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import flashx.textLayout.formats.Direction;
			import flashx.textLayout.elements.FlowLeafElement;
			import view.contacts.WindowChat;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.events.StatusChangeEvent;
			import flashx.textLayout.container.IContainerController;
			import flashx.textLayout.conversion.TextFilter;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.UndoManager;
			import flashx.textLayout.elements.Configuration;
			import model.chat.IkubyxMessage;
			import flashx.textLayout.container.DisplayObjectContainerController;
			import flashx.textLayout.elements.TextFlow;
			[Bindable] public var text : String;			
			[Bindable] public var message : IkubyxMessage;
			protected var _flow:TextFlow;			
			protected var _text_field_bounds:Rectangle=new Rectangle(0,0,500,100);
			public var flow_container:Sprite;
			public var controller:DisplayObjectContainerController;
			private var _textContainer:Sprite = null;
			private var _textFlow:TextFlow;
        	private var _controller:IContainerController;

			[Bindable]
            [Embed(source="assets/images/GreyIcone.png")]
            public var greyicone:Class;

            [Bindable]
            [Embed(source="assets/images/OrangeIcone.png")]
            public var orangeicone:Class;
            
            private static const _textInput:XML = <TextFlow xmlns="http://ns.adobe.com/textLayout/2008">

   <div>

     <p>

     <img source="air.png"/>

       <span>Flex is a highly productive, free open source framework for building and maintaining expressive web applications...</span>

          <br/>

       </p>
      </div>

   </TextFlow>;

			public function init():void{
				var xml : XML;
				if(message.ismine==true){
					xml = <img width="5" height="5" source="assets/images/GreyIcone.png"/>;					
				}
				else{					
					xml = <img width="5" height="5" source="assets/images/OrangeIcone.png"/>;
				}
				/*var config:Configuration = TextFlow.defaultConfiguration;
            	config.manageEnterKey = false;            	
				_flow=new TextFlow(config);
				flow_container=new Sprite();
				flow_holder.graphics.beginFill(0xFFFFFF);
				flow_holder.graphics.drawRect(0,0,flow_holder.width,flow_holder.height);
				flow_holder.addChild(flow_container);
				controller=new DisplayObjectContainerController(flow_container,flow_holder.width,flow_holder.height);							
				_flow.flowComposer.addController(controller);
				_flow.interactionManager = new EditManager(new UndoManager());
				_flow.interactionManager.setSelection(0,0);             
	            var p:ParagraphElement = new ParagraphElement();
	            _flow.addChild(p);
	            var item : XML = message.msg.children()[0];
	            var para : XMLList = new XMLList(item);
	            
	            for(var i : int =0;i<message.msg.children().children().length();i++){
					var currentNode:XML = message.msg.children().children()[ i ];				
					if(currentNode.localName()==WindowChat.SPANELEMENT){
						var span:SpanElement = new SpanElement();						
	            		span.text = currentNode.toString();
	            		span.fontSize = 12;
	            		span.fontFamily="Tahoma";
	            		span.color = "#A9A9A9";
	            		p.addChild(span);
					}else if(currentNode.localName()==WindowChat.IMAGEELEMENT){	
						trace(currentNode.@source)									
						EditManager(_flow.interactionManager).insertInlineGraphic(currentNode.@source,Number(currentNode.@width),Number(currentNode.@height));						
					}					
				}                                          
	            _flow.flowComposer.updateAllContainers();*/
	            var out : XML = message.msg;
	            out.children().prependChild(<img width="10"/>);	                         
	            out.children().prependChild(xml);	            
				
	            _textContainer = new Sprite();
	            canvas.rawChildren.addChild(_textContainer);
	            _controller = new DisplayObjectContainerController(_textContainer, canvas.width, canvas.height);				
	            _textFlow = TextFilter.importToFlow(out, TextFilter.TEXT_LAYOUT_FORMAT);	            
	            _textFlow.flowComposer.addController(_controller);
	            _textFlow.addEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGED, picLoaded);            
	            _textFlow.flowComposer.updateAllContainers();			
			}
			
			private function picLoaded(event:StatusChangeEvent):void {
	            var image:InlineGraphicElement = event.element as InlineGraphicElement;
	            _textFlow.flowComposer.updateAllContainers();
	        }

		]]>
	</mx:Script>
	<mx:HBox width="100%" height="100%" verticalAlign="bottom" >		
		<mx:HBox width="100%" height="100%" verticalAlign="top" >
			<mx:Canvas id="canvas" width="100%" height="80" backgroundColor="#ffffff" backgroundAlpha="0"/>
			<!--<mx:TextArea backgroundAlpha="0" focusEnabled="false" id="flow_holder" width="100%" height="95" focusAlpha="0" borderStyle="none">
        		
        
        	</mx:TextArea>-->	
		</mx:HBox>	 
	</mx:HBox>
</mx:HBox>
