<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.hurlant.crypto.symmetric.NullPad;
			import mx.controls.Alert;
			import flashx.textLayout.formats.Direction;
			import flashx.textLayout.elements.FlowLeafElement;
			import view.contacts.WindowChat;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.events.StatusChangeEvent;
			import flashx.textLayout.container.IContainerController;
			import flashx.textLayout.conversion.TextFilter;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.UndoManager;
			import flashx.textLayout.elements.Configuration;
			import model.chat.IkubyxMessage;
			import flashx.textLayout.container.DisplayObjectContainerController;
			import flashx.textLayout.elements.TextFlow;
			[Bindable] public var text : String;			
			[Bindable] public var message : IkubyxMessage;
			protected var _flow:TextFlow;			
			protected var _text_field_bounds:Rectangle=new Rectangle(0,0,500,100);
			public var flow_container:Sprite;
			public var controller:DisplayObjectContainerController;
			private var _textContainer:Sprite = null;
			private var _textFlow:TextFlow;
        	private var _controller:IContainerController;

			[Bindable]
            [Embed(source="assets/images/GreyIcone.png")]
            public var greyicone:Class;

            [Bindable]
            [Embed(source="assets/images/OrangeIcone.png")]
            public var orangeicone:Class;          
            public var imageExist : Boolean = false;
			public function calculeLenghtText(xml : XML):Number{
				var lent : Number = 0;
				for(var i : int =0;i<xml.children().children().length();i++){
					var currentNode:XML = message.msg.children().children()[ i ];				
					if(currentNode.localName()==WindowChat.SPANELEMENT){												
	            		lent += currentNode.toString().length * 3;	            		
					}else if(currentNode.localName()==WindowChat.IMAGEELEMENT){	
						lent += Number(currentNode.@width);		
						imageExist = true;									
					}
				}
				return lent;
			}
			
			public function init():void{
				var xml : XML;
				if(message.ismine==true){
					xml = <img width="5" height="5" source="assets/images/GreyIcone.png"/>;					
				}
				else{					
					xml = <img width="5" height="5" source="assets/images/OrangeIcone.png"/>;
				}
				          
	            var out : XML = new XML(message.msg.toString());
	            /*var taille : Number = calculeLenghtText(out);
	            var hauteur : Number = taille / canvas.width;	            	                     
	            if(int(hauteur)==0) hauteur = canvas.height;	            
	            else hauteur = int(hauteur) * canvas.height;
	            if(imageExist==true)
	            	hauteur = hauteur + 24;           	
	            imageExist = false;*/	            
	            
	            out.children().prependChild(<img width="1" height="24"/>);
	            out.children().prependChild(<img width="10"/>);	            	                         
	            out.children().prependChild(xml);
	            
	            
	            _textContainer = new Sprite();
	            canvas.rawChildren.addChild(_textContainer);
	            
	            _controller = new DisplayObjectContainerController(_textContainer, canvas.width);				
	            _textFlow = TextFilter.importToFlow(out, TextFilter.TEXT_LAYOUT_FORMAT);	            
	            _textFlow.flowComposer.addController(_controller);
	            _textFlow.addEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGED, picLoaded);            
	            _textFlow.flowComposer.updateAllContainers();
	            canvas.height = _controller.calculateHeight();
	            
			}
			
			private function picLoaded(event:StatusChangeEvent):void {
	            var image:InlineGraphicElement = event.element as InlineGraphicElement;
	            _textFlow.flowComposer.updateAllContainers();
	        }

		]]>
	</mx:Script>
	<mx:HBox width="100%" height="100%" verticalAlign="bottom" >		
		<mx:HBox width="100%" height="100%" verticalAlign="bottom" >
			<mx:Canvas id="canvas" width="100%" height="100%" backgroundColor="#ffffff" backgroundAlpha="0"/>
			<!--<mx:TextArea backgroundAlpha="0" focusEnabled="false" id="flow_holder" width="100%" height="95" focusAlpha="0" borderStyle="none">
        		
        
        	</mx:TextArea>-->	
		</mx:HBox>	 
	</mx:HBox>
</mx:HBox>
