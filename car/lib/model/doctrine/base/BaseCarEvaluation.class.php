<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CarEvaluation', 'doctrine');

/**
 * BaseCarEvaluation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $idevaluation
 * @property integer $iduser
 * @property integer $idauto
 * @property integer $noteprix
 * @property integer $notemoteur
 * @property integer $notekm
 * @property integer $noteconso
 * @property integer $noteetat
 * @property integer $noteoption
 * @property integer $noteglobal
 * @property integer $active
 * @property CarAuto $CarAuto
 * 
 * @method integer       getIdevaluation() Returns the current record's "idevaluation" value
 * @method integer       getIduser()       Returns the current record's "iduser" value
 * @method integer       getIdauto()       Returns the current record's "idauto" value
 * @method integer       getNoteprix()     Returns the current record's "noteprix" value
 * @method integer       getNotemoteur()   Returns the current record's "notemoteur" value
 * @method integer       getNotekm()       Returns the current record's "notekm" value
 * @method integer       getNoteconso()    Returns the current record's "noteconso" value
 * @method integer       getNoteetat()     Returns the current record's "noteetat" value
 * @method integer       getNoteoption()   Returns the current record's "noteoption" value
 * @method integer       getNoteglobal()   Returns the current record's "noteglobal" value
 * @method integer       getActive()       Returns the current record's "active" value
 * @method CarAuto       getCarAuto()      Returns the current record's "CarAuto" value
 * @method CarEvaluation setIdevaluation() Sets the current record's "idevaluation" value
 * @method CarEvaluation setIduser()       Sets the current record's "iduser" value
 * @method CarEvaluation setIdauto()       Sets the current record's "idauto" value
 * @method CarEvaluation setNoteprix()     Sets the current record's "noteprix" value
 * @method CarEvaluation setNotemoteur()   Sets the current record's "notemoteur" value
 * @method CarEvaluation setNotekm()       Sets the current record's "notekm" value
 * @method CarEvaluation setNoteconso()    Sets the current record's "noteconso" value
 * @method CarEvaluation setNoteetat()     Sets the current record's "noteetat" value
 * @method CarEvaluation setNoteoption()   Sets the current record's "noteoption" value
 * @method CarEvaluation setNoteglobal()   Sets the current record's "noteglobal" value
 * @method CarEvaluation setActive()       Sets the current record's "active" value
 * @method CarEvaluation setCarAuto()      Sets the current record's "CarAuto" value
 * 
 * @package    car
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseCarEvaluation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('car_evaluation');
        $this->hasColumn('idevaluation', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('iduser', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('idauto', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('noteprix', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('notemoteur', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('notekm', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('noteconso', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('noteetat', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('noteoption', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('noteglobal', 'integer', 10, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => '10',
             ));
        $this->hasColumn('active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '1',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('CarAuto', array(
             'local' => 'idauto',
             'foreign' => 'idauto',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}