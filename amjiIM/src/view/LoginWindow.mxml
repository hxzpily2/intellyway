<?xml version="1.0" encoding="utf-8"?>
<mx:Window width="280" height="600" minWidth="280" minHeight="600" xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
	backgroundAlpha="0"
    showTitleBar="false"
    showStatusBar="false"
    showGripper="false"
    borderStyle="none"    
    horizontalAlign="center" 
    creationPolicy="all"   
    creationComplete="init()" xmlns:amjiinputtext="com.bedreamy.components.amjiinputtext.*" xmlns:combobox="com.bedreamy.components.combobox.*" xmlns:components="commun.components.*">
    <mx:Script>
    	<![CDATA[
    		import model.vo.UserVO;
    		import commun.Constantes;
    		import commun.Actions;
    		import mx.events.FlexEvent;
    		import mx.events.EffectEvent;
    		import mx.effects.Fade;
    		import mx.controls.PopUpButton;
    		import com.bedreamy.facade.MainFacade;
    		import mx.managers.PopUpManager;
    		import mx.controls.Alert;
    		import mx.core.UIComponent;
    		import mx.events.ToolTipEvent;
    		[Bindable]
            [Embed(source="assets/images/en_ligne.png")]
            public var EnLigne:Class;

            [Bindable]
            [Embed(source="assets/images/occupe.png")]
            public var Occupe:Class;

            [Bindable]
            [Embed(source="assets/images/absent.png")]
            public var Absent:Class;
			
			[Bindable]
            [Embed(source="assets/images/de_retour.png")]
            public var Retour:Class;
            
            [Bindable]
            [Embed(source="assets/images/hors_ligne.png")]
            public var HorsLigne:Class;

    		private function init():void{
    			nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2;
                nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;
				window = new LoginTooltip;
				window.addEventListener(Actions.SHOWUSERUI,showInscription);				
    			//this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;    			
								   			
    		}
    		public function showInscription(event : Event):void{
    			dispatchEvent(event);
    		}
    		public var window : LoginTooltip;
    		private static var dissolve : Fade = new Fade();
    		[Bindable]
    		public var userVO : UserVO = new UserVO;
    		private function createTip(e:MouseEvent):void {
    			if(window.isOpened==false){
	    			window.isOpened = true; 
	    			
	                window.x = (toolButton as UIComponent).contentToGlobal(new Point(toolButton.x,toolButton.y)).x-88;
	                window.y = (e.target as UIComponent).contentToGlobal(new Point(e.target.x,e.target.y)).y + 20;
	                
	                PopUpManager.addPopUp(window,this,false);
	                dissolve.alphaFrom = 0;
            		dissolve.alphaTo = 1;
            		dissolve.duration = 500;
            		dissolve.target=window;
            		dissolve.play(); 
	                
       			}else{
       				dissolve.alphaFrom = 1;
            		dissolve.alphaTo = 0;
            		dissolve.duration = 500;
            		dissolve.target=window;
            		dissolve.play();
            		dissolve.addEventListener(EffectEvent.EFFECT_END,closePopup);       				
       			}
                
            }
            
            public function closePopupExt():void{
            	if(window.isOpened!=false){
            		dissolve.alphaFrom = 1;
            		dissolve.alphaTo = 0;
            		dissolve.duration = 500;
            		dissolve.target=window;
            		dissolve.play();
            		dissolve.addEventListener(EffectEvent.EFFECT_END,closePopup);
            	}
            }
           
            public function closeLoginPopup(e:MouseEvent):void{
            	if(window.isOpened!=false){
            		dissolve.alphaFrom = 1;
            		dissolve.alphaTo = 0;
            		dissolve.duration = 500;
            		dissolve.target=window;
            		dissolve.play();
            		dissolve.addEventListener(EffectEvent.EFFECT_END,closePopup);
            	}
            }
            
            public function closePopup(e:EffectEvent):void{
            	   dissolve.removeEventListener(EffectEvent.EFFECT_END,closePopup);
            	   PopUpManager.removePopUp(window);
            	   window.isOpened = false;
            }
            
           


    	]]>
    </mx:Script>
	<mx:VBox styleName="loginScalingBackground" dropShadowEnabled="true" width="100%" height="100%" horizontalAlign="center">
		<mx:HBox width="100%" height="15" horizontalAlign="right" paddingRight="15">
		    <components:WindowMin width="9" height="9" buttonMode="true" useHandCursor="true" />
			<components:WindowMax  width="9" height="9" buttonMode="true" useHandCursor="true" />
			<components:WindowClose click="this.close();dispatchEvent(new Event(Actions.CLOSEAPPLI))" width="9" height="9" buttonMode="true" useHandCursor="true" />			
		</mx:HBox>
		<mx:Spacer height="20" />
		<mx:Image mouseDown="this.nativeWindow.startMove()" source="@Embed(source='assets/images/logo.png')" />
		<mx:Spacer height="10" />
		<mx:VBox horizontalAlign="center" width="257" height="142" styleName="loginAreaBackground">
			<mx:Spacer height="20" />
			<amjiinputtext:AmjiInputText id="txtLogin" change="userVO.login = txtLogin.content" content="{userVO.login}" displayAsPassword="false" text="LOGIN" width="210" height="30"/>
			<amjiinputtext:AmjiInputText id="txtPass" change="userVO.pass = txtPass.content" content="{userVO.pass}" displayAsPassword="true" text="PASSWORD" width="210" height="30"/>
			<mx:HBox horizontalAlign="right" width="220">
				<mx:Button click="dispatchEvent(new Event(Actions.LOGIN))" id="toolButton" useHandCursor="true" buttonMode="true" overSkin="@Embed(source='assets/images/button_login_over.png')" downSkin="@Embed(source='assets/images/button_login_down.png')" upSkin="@Embed(source='assets/images/button_login_up.png')" label=""/>				
			</mx:HBox>			
		</mx:VBox>
		<mx:Spacer height="10" />
		<mx:HBox width="257" horizontalAlign="left" verticalAlign="middle">		    
			<mx:Spacer  width="10"/>
			<combobox:AmjiCombobox change="userVO.statut = comboBox.selectedItem.key" id="comboBox" width="105">
				<combobox:dataProvider>
					<mx:Array>
		                <mx:Object key="{Constantes.ENLIGNE}" label="En ligne" icon="EnLigne" />
		                <mx:Object key="{Constantes.OCCUPE}" label="OccupÃ©" icon="Occupe" />
		                <mx:Object key="{Constantes.ABSENT}" label="Absent" icon="Absent" />
		                <mx:Object key="{Constantes.DERETOUR}" label="De retour" icon="Retour" />
		                <mx:Object key="{Constantes.HORSLIGNE}" label="Hors ligne" icon="HorsLigne" />		                
		            </mx:Array>
				</combobox:dataProvider>
			</combobox:AmjiCombobox>
			<mx:Spacer width="90" />
			<components:AmjiButtonTool useHandCursor="true" buttonMode="true" click="createTip(event)" width="15" height="15" label="" />				
		</mx:HBox>
		<mx:Spacer height="100%" />
		<mx:HBox width="100%" horizontalAlign="left"  paddingRight="3">
		    <mx:Text paddingLeft="15" color="#9F9F9F" text="2010 BEDREAMY COPYRIGHT" fontSize="8" fontFamily="kroeger"/>
		    <mx:Spacer width="100%" />
			<components:AmjiButtonResize useHandCursor="true" buttonMode="true" mouseDown="closeLoginPopup(event);this.nativeWindow.startResize()" alpha="1" width="12" height="12"/>			
		</mx:HBox>		
	</mx:VBox>
</mx:Window>
