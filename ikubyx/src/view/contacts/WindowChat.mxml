<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" width="100%" height="100%"
	verticalAlign="top"
	verticalGap="10"
	paddingLeft="10"
	paddingRight="10"
	paddingBottom="10"	
	creationComplete="init()" xmlns:components="commun.components.*" xmlns:ns="library:adobe/flashx/textLayout" xmlns:chat="view.chat.*">
	<mx:Script>
		<![CDATA[
			import view.chat.MessageBlock;
			import commun.Constantes;
			import model.chat.IkubyxMessage;
			import commun.IkubyxSendMsgEvent;
			import model.vo.CreateUserVO;
			import model.vo.UserVO;
			import org.igniterealtime.xiff.core.UnescapedJID;
			import mx.events.DividerEvent;
			import flashx.textLayout.elements.Configuration;
			import flashx.textLayout.conversion.ImportExportConfiguration;
			import flashx.textLayout.elements.FlowLeafElement;
			import flashx.textLayout.events.SelectionEvent;
			import flashx.textLayout.edit.SelectionManager;
			import com.degrafa.geometry.utilities.GeometryUtils;
			import flashx.textLayout.elements.FlowElement;
			import com.hurlant.crypto.symmetric.NullPad;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.ParagraphElement;
			import commun.Commun;
			import mx.collections.ArrayCollection;
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.events.ScrollEvent;
        	import mx.events.ScrollEvent;

			
			import mx.controls.Alert;
			import flashx.textLayout.container.IContainerController;
        	import flashx.textLayout.events.CompositionCompletionEvent;
        	import flashx.textLayout.edit.UndoManager;
        	import flashx.textLayout.edit.EditManager;
        	import flashx.textLayout.events.StatusChangeEvent;
        	import flashx.textLayout.elements.InlineGraphicElement;
        	import flashx.textLayout.container.DisplayObjectContainerController;
        	import flashx.textLayout.conversion.TextFilter;
        	import flashx.textLayout.elements.TextFlow;
        	

			
			public static var CHAT:String = "chat";
			public static var ROOM:String = "room";
			
			public static var SPANELEMENT:String = "span";
			public static var IMAGEELEMENT:String = "img";
			[Bindable] public var typeWin : String;
			
			public var jid : UnescapedJID;
			[Bindable] public var sendTo : CreateUserVO;
			[Bindable] public var sendFrom : CreateUserVO;			
			
			protected var _flow:TextFlow;
			protected var _file_ref:FileReference;
			protected var _img_loader:Loader;
			protected var _text_field_bounds:Rectangle=new Rectangle(0,0,500,100);
			public var actifSpan : Number = 0;
			public var cursorPosFirst : Number = 0;
			public var cursorPosLast : Number = 0;
			public var elementFlow : ArrayCollection = new ArrayCollection();
			public var flow_container:Sprite;
			public var controller:DisplayObjectContainerController;
			[Bindable] public var messages:Object = {};
			[Bindable] public var listMessages : ArrayCollection = new ArrayCollection;
			
			public function sendMessage(event : MouseEvent):void{
				var out:XML = TextFilter.export(_flow, TextFilter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE ) as XML;
				trace(out);
				var message : IkubyxMessage = new IkubyxMessage();
				message.msg = out;
				message.jidFrom = Commun.getJidFromMail(sendFrom.email)+"@"+Constantes.XMPPSERVEUR;
				message.jidTo = Commun.getJidFromMail(sendTo.email)+"@"+Constantes.XMPPSERVEUR;
				message.ismine = true;
				message.elementFlow = elementFlow;
				message.datesend = new Date();				
				var msgEvent : IkubyxSendMsgEvent = new IkubyxSendMsgEvent(IkubyxSendMsgEvent.MESSAGEEVENT,message);				
				//test if lastmessage.fromTo == message.fromTo
				var array : ArrayCollection = messages[Commun.getJidFromMail(sendFrom.email)+"@"+Constantes.XMPPSERVEUR] as ArrayCollection;
				array.addItem(message);
				messages[Commun.getJidFromMail(sendFrom.email)+"@"+Constantes.XMPPSERVEUR] = array;
				if(listMessages.length==0){
					var msgBlk : MessageBlock = new MessageBlock;
					msgBlk.user = sendFrom;
					msgBlk.messages.addItem(message);
					blockUser.addChild(msgBlk);
				}else{
					var msg : IkubyxMessage = listMessages.getItemAt(listMessages.length-1) as IkubyxMessage;
					if(msg.ismine == true){						
						var msgBlk : MessageBlock = blockUser.getChildAt(blockUser.getChildren().length-1) as MessageBlock;
						msgBlk.messages.addItem(message);
					}else{
						var msgBlk : MessageBlock = new MessageBlock;
						msgBlk.user = sendFrom;
						msgBlk.messages.addItem(message);
						blockUser.addChild(msgBlk);						
					}
				}	
				listMessages.addItem(message);			
				//fin 
				dispatchEvent(msgEvent);
				var p : ParagraphElement = _flow.getChildAtIndex(0) as ParagraphElement; 
				while (p.numChildren > 0) p.removeChildAt(0);
				var span:SpanElement = new SpanElement();
	            span.text = "";
	            span.fontSize = 12;
	            span.fontFamily="Tahoma";
	            span.color = "#A9A9A9";
	            p.addChild(span);
				_flow.interactionManager.setSelection(0,0);	 
	            _flow.interactionManager.setFocus();           
	            _flow.flowComposer.updateAllContainers();				
			}
			
			public function getMessage(xml : XML,userFrom : CreateUserVO):void{
				var mesg : IkubyxMessage = new IkubyxMessage;
				mesg.msg = xml;
				mesg.jidFrom = Commun.getJidFromMail(userFrom.email)+"@"+Constantes.XMPPSERVEUR;
				mesg.jidTo = Commun.getJidFromMail(sendFrom.email)+"@"+Constantes.XMPPSERVEUR;
				mesg.ismine = true;				
				mesg.datesend = new Date();
				if(listMessages.length==0){
					var msgBlk : MessageBlock = new MessageBlock;
					msgBlk.user = userFrom;
					msgBlk.messages.addItem(mesg);
					blockUser.addChild(msgBlk);
				}else{
					var msg : IkubyxMessage = listMessages.getItemAt(listMessages.length-1) as IkubyxMessage;
					if(msg.ismine == true){						
						var msgBlk : MessageBlock = blockUser.getChildAt(blockUser.getChildren().length-1) as MessageBlock;
						msgBlk.messages.addItem(mesg);
					}else{
						var msgBlk : MessageBlock = new MessageBlock;
						msgBlk.user = userFrom;
						msgBlk.messages.addItem(mesg);
						blockUser.addChild(msgBlk);						
					}
				}
			}
			
			protected function init():void{
				messages[Commun.getJidFromMail(sendFrom.email)+"@"+Constantes.XMPPSERVEUR] = new ArrayCollection;
				messages[Commun.getJidFromMail(sendTo.email)+"@"+Constantes.XMPPSERVEUR] = new ArrayCollection;
				createTextFlow();
			}
			
			public function getLastCharacter():String{
				var span : SpanElement = elementFlow.getItemAt(elementFlow.length-1).item as SpanElement;
				return span.text.charAt(span.text.length-1);
			}
			
			public function addElementFlow(object : Object,fisrtPos : Number,lastPos : Number , type : String):void{
				
			}
			
			protected function createTextFlow():void{				
            	var config:Configuration = TextFlow.defaultConfiguration;
            	config.manageEnterKey = false;            	
				_flow=new TextFlow(config);
				flow_container=new Sprite();
				flow_holder.graphics.beginFill(0xFFFFFF);
				flow_holder.graphics.drawRect(0,0,flow_holder.width,flow_holder.height);
				flow_holder.addChild(flow_container);
				controller=new DisplayObjectContainerController(flow_container,flow_holder.width,flow_holder.height);							
				_flow.flowComposer.addController(controller);
	            _flow.interactionManager = new EditManager(new UndoManager());
	            //_flow.interactionManager = new SelectionManager();
	            _flow.addEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, composeListener);
	            _flow.addEventListener(SelectionEvent.SELECTION_CHANGE,selectionChange);
	            var p:ParagraphElement = new ParagraphElement();
	            var span:SpanElement = new SpanElement();
	            span.text = "";
	            span.fontSize = 12;
	            span.fontFamily="Tahoma";
	            span.color = "#A9A9A9";
	            p.addChild(span);
	            addElementFlow(span,0,0,WindowChat.SPANELEMENT);	            
	            _flow.addChild(p);
	            _flow.interactionManager.setSelection(0,0);	 
	            _flow.interactionManager.setFocus();           
	            _flow.flowComposer.updateAllContainers();	            
			}
			
			public function addImage(e:MouseEvent):void {
			  _file_ref = new FileReference();
			  _file_ref.addEventListener( Event.SELECT, handleFileSelect,false,0,true );
			   var filter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png");
			  _file_ref.browse([filter]);
			}
			
			private function handleFileSelect(e:Event):void {
			  _file_ref.removeEventListener( Event.SELECT, handleFileSelect );
			  _file_ref.addEventListener(Event.COMPLETE, handleFileOpen,false,0,true );
			  _file_ref.load();
			}

			private function handleFileOpen(e:Event):void {
			  _file_ref.removeEventListener(Event.COMPLETE, handleFileOpen );
			  var data:ByteArray = _file_ref.data as ByteArray;
			  _img_loader=new Loader();				  		 		  		  		  
			  _img_loader.loadBytes(data);
			  _img_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,imageLoadComplete,false,0,true);
			}
			
			public function selectionChange(event : SelectionEvent):void{				
				if(event.selectedElementRange!=null){
					cursorPosFirst = event.selectedElementRange.firstLeafPosition;
					cursorPosLast = event.selectedElementRange.lastLeafPosition;
				}else{
					cursorPosFirst = 0;
					cursorPosLast = 0;
				}
				this.getNumberElements();				
			}
			
			public function getNumberElements():Number{
				var out:XML = TextFilter.export(_flow, TextFilter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE ) as XML;				
				elementFlow = new ArrayCollection;
				for(var i : int =0;i<out.children().children().length();i++){
					var currentNode:XML = out.children().children()[ i ];					
					var object : Object = new Object;
					object.type = currentNode.localName();
					elementFlow.addItem(object); 	
				}
				
				var p : ParagraphElement = _flow.getChildAtIndex(0) as ParagraphElement; 
				var lastPos : Number = 0;
				for(i=0;i<elementFlow.length;i++){
					var object : Object = elementFlow.getItemAt(i) as Object;
					var leaf : FlowLeafElement;
					if(i==0){
						if(object.type == WindowChat.SPANELEMENT){
							leaf = SpanElement(p.getFirstLeaf());
							object.firstLeafPosition=0;
							if(leaf!=null){
								object.lastLeafPosition=leaf.text.length;
								object.length = leaf.text.length;
								object.text = leaf.text;
							}
							else{
								object.lastLeafPosition=0;
								object.length = 0;
							}
							lastPos = leaf.text.length;
																					
						}else if(object.type == WindowChat.IMAGEELEMENT){
							leaf = InlineGraphicElement(p.getFirstLeaf());
							object.firstLeafPosition=0;
							object.lastLeafPosition=1;
							lastPos = 1;
							object.length = 1;							
						}
					}else{
						if(object.type == WindowChat.SPANELEMENT){
							leaf = SpanElement(leaf.getNextLeaf(p));
							object.firstLeafPosition=lastPos;
							if(leaf!=null){
								object.lastLeafPosition=lastPos+leaf.text.length;
								object.length = leaf.text.length;
								object.text = leaf.text;
							}
							else{
								object.lastLeafPosition=lastPos;
								object.length = 0;
							}
							lastPos = object.lastLeafPosition;														
						}else if(object.type == WindowChat.IMAGEELEMENT){
							leaf = InlineGraphicElement(leaf.getNextLeaf(p));
							object.firstLeafPosition=lastPos;
							object.lastLeafPosition=lastPos+1;
							lastPos = lastPos+1;
							object.length = 1;							 							
						}							
					}
					object.item = leaf;					
					elementFlow.removeItemAt(i);
					elementFlow.addItemAt(object,i);
				}				
				return elementFlow.length;
			}
			
			private function composeListener(e:CompositionCompletionEvent):void {
			  /*var out:XML = TextFilter.export(_flow, TextFilter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE ) as XML;			  	
			  trace("here");
			  if(_flow.getLastLeaf().text.search(/:D/)!=-1){
			  		var p : ParagraphElement = _flow.getChildAtIndex(0) as ParagraphElement; 
			  		var span : FlowElement = _flow.getLastLeaf() as FlowElement;
			  		
			  							
			  		var newSpan : SpanElement = new SpanElement();
			  		//newSpan.text=span.text.split(4);;
	            	newSpan.fontSize = 12;
	            	newSpan.fontFamily="Tahoma";
	            	newSpan.color="#A9A9A9";
	            	newSpan.text = "test";
	            	p.addChild(newSpan);  
	            	
	            	var leaf:SpanElement = new SpanElement();
              		leaf = SpanElement(_flow.getFirstLeaf());
              		trace(leaf.text);
			  		while(leaf = SpanElement(leaf.getNextLeaf(p)))
		           		trace(leaf.text);       	
	            	
	            	p.removeChildAt(0);
	            	_flow.interactionManager.setSelection(newSpan.text.length,newSpan.text.length);
			  		_flow.flowComposer.updateAllContainers();
			  		_img_loader=new Loader();
			        var image:URLRequest = new URLRequest("assets/emoticones/2s/24/anger.png");			  
			  		_img_loader.load(image);		  
			  		_img_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,imageLoadComplete,false,0,true);
			  		_flow.removeEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, composeListener);
			  }			    
			  //_img_loader=new Loader();
			  //var image:URLRequest = new URLRequest("assets/emoticones/2s/24/anger.png");			  
			  //_img_loader.load(image);		  
			  //_img_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,imageLoadComplete,false,0,true);
			  //_flow.removeEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, composeListener);*/
			  var p : ParagraphElement = _flow.getChildAtIndex(0) as ParagraphElement;
			  trace("number of element",this.getNumberElements());
			  var actifIdSpan : Number = this.getActifSpan();
			  trace("actif span",actifIdSpan);
			  var actifspan : SpanElement = elementFlow.getItemAt(actifIdSpan).item as SpanElement;
			  
			  for(var i : Number = 0;i<Commun.s2emoticones24.length;i++){
			  	if(actifspan!=null){
				  	var pos : Number = findRegExp(new RegExp(Commun.s2emoticones24.getItemAt(i).link),actifspan.text);
				  	if(pos>=0){
				  		_flow.interactionManager.setSelection(pos+elementFlow.getItemAt(actifIdSpan).firstLeafPosition,pos+elementFlow.getItemAt(actifIdSpan).firstLeafPosition);
				  		//suprimer le racourci				  		
				  		actifspan.text = actifspan.text.replace(new RegExp(Commun.s2emoticones24.getItemAt(i).link),"");				  		
				  		//fin supression				  		
				  		source=Commun.s2emoticones24.getItemAt(i).source;
				  		_img_loader=new Loader();
				  		var image:URLRequest = new URLRequest(Commun.s2emoticones24.getItemAt(i).source);			  
				  		_img_loader.load(image);		  
				  		_img_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,imageLoadComplete,false,0,true);
				  		_flow.removeEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, composeListener);
				  	}
				  }	
			  }		  
			}
			public var source : String;
			public function findRegExp(reg : RegExp,text : String):Number{
				return text.search(reg);
			}
			
			public function getActifSpan():Number{
				for(var i : Number=0;i<elementFlow.length;i++){
					var object : Object = elementFlow.getItemAt(i);
					if(object.type==WindowChat.SPANELEMENT && this.cursorPosFirst > object.firstLeafPosition && this.cursorPosFirst<=object.lastLeafPosition){
						return i;
					}						
				}
				return null;
			}
			
			protected function imageLoadComplete(e:Event):void{
			  _img_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,imageLoadComplete);
			  var bmd:BitmapData=Bitmap(_img_loader.content).bitmapData;
			  var bm:Bitmap=new Bitmap(bmd);
			  //EditManager(_flow.interactionManager).insertInlineGraphic(bm,bm.width,bm.height);
			  EditManager(_flow.interactionManager).insertInlineGraphic(source,bm.width,bm.height);
			  _flow.flowComposer.updateAllContainers();
			  _flow.addEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, composeListener);
			  this.getNumberElements();
			}
			
			public function handleKeyUp(event : KeyboardEvent):void{
				if(event.charCode==13)
					sendMessage(new MouseEvent(""));
			}
			
			public function updateGraphic(event : DividerEvent):void{
				trace(flow_holder.height);
				controller.setCompositionSize(flow_holder.width,flow_holder.height);												
				/*controller = new DisplayObjectContainerController(flow_container,flow_holder.width,flow_holder.height);				
				_flow.flowComposer.removeAllControllers();
				_flow.flowComposer.addController(controller);*/				
			}
			
		]]>
	</mx:Script>
	<mx:Style>
		.hboxStyle
			{
			        /*background-color:                       "90deg #FFF0A5 #FFB03B";*/
			        border-bottom-left-radius:              5;
			        border-bottom-right-radius:             5;
			        border-top-left-radius:                 0;
			        border-top-right-radius:                0;
			        borderSkin:                                     ClassReference("com.degrafa.skins.CSSSkin");
			
			        /*border-color:                                   #222222;
			        border-width:                                   "2px 2px 2px 2px";
			        border-alpha:                                   1;*/
			
			} 
	</mx:Style>	
	<mx:VDividedBox dividerDrag="updateGraphic(event)" width="100%" height="100%">
	<mx:VBox width="100%" height="100%">	
		<mx:VBox verticalGap="5" width="100%" id="blockUser">
			
		</mx:VBox>
	<!--<mx:Button label="add image" click="addImage(event);" x="100" y="20" />--> 
	</mx:VBox>
		
	
	<mx:VBox minHeight="95" verticalGap="0" width="100%" height="95" borderStyle="solid" borderThickness="0" backgroundColor="#FFFFFF" cornerRadius="5">		
		<mx:filters>
            <mx:DropShadowFilter inner="true" color="#A8A8A8" blurX="10" blurY="10" distance="0" angle="0"/>            		            
        </mx:filters>        
        <mx:HBox paddingBottom="5" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle" backgroundAlpha="0" width="100%" height="100%" horizontalAlign="right" >        	
        	<mx:TextArea keyUp="handleKeyUp(event)" focusEnabled="false" id="flow_holder" width="100%" height="100%" focusAlpha="0" borderStyle="none">
        		
        
        	</mx:TextArea>        	        	
        	<mx:Image click="sendMessage(event)" id="btnSend" mouseOver="btnSend.alpha = 0.8" mouseOut="btnSend.alpha = 0.5" buttonMode="true" useHandCursor="true" alpha="0.5" source="@Embed(source='assets/images/IM.png')"  />	
        </mx:HBox>
        <mx:HBox styleName="hboxStyle" alpha="0.5" backgroundColor="#A8A8A8" height="20" width="100%"/>        
	</mx:VBox>
	</mx:VDividedBox>
</mx:VBox>
